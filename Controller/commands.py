import Repository.loadFromFile as lF
import Repository.writeToFile as wF
from Models.Note import Note


def add_note():
    title = input("üí°–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:\n")
    body = input("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n")
    note = Note(title=title, body=body)
    array_notes = lF.read_file()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
    existing_ids = [n.get_id() for n in array_notes]
    while note.get_id() in existing_ids:
        note.set_id()  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID

    array_notes.append(note)
    wF.write_file(array_notes, 'w')

    print("\n‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª!")
    print(f"üÜî ID –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏: {note.get_id()}")
    print_note(note)
    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")


def show(txt):
    array_notes = lF.read_file()

    if not array_notes:
        print("ü´ô –ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç")
        print("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")
        input()
        return 

    if txt == "all":
        print("üìí –ñ–£–†–ù–ê–õ –ó–ê–ú–ï–¢–û–ö üìí")
        print("**********************")
        for i in array_notes:
            print_note(i)

    elif txt == "ID":
        for i in array_notes:
            print(f"ID: {i.get_id()}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {i.get_title()}")
        id = input("\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏: ").strip()
        found = False
        for i in array_notes:
            if id == i.get_id():
                print_note(i)
                found = True
        if not found:
            print("ü§∑üèº‚Äç‚ôÄÔ∏è –ù–µ—Ç —Ç–∞–∫–æ–≥–æ ID")

    elif txt == "date":
        date = input("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: dd.mm.yyyy: ").strip()
        found = False
        for i in array_notes:
            note_date = i.get_date().split(" ")[0]
            if date == note_date:
                print_note(i)
                found = True
        if not found:
            print("ü§∑üèº‚Äç‚ôÄÔ∏è –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π")
    print("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")
    input()

def print_note(note):
    print("üìù –ó–∞–º–µ—Ç–∫–∞:")
    print(f"ID: {note.get_id()}")
    print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note.get_title()}")
    print(f"–¢–µ–∫—Å—Ç: {note.get_body()}")
    print(f"–î–∞—Ç–∞: {note.get_date()}")
    print("‚Äï" * 40)

def del_notes():
    id_to_delete = input("–í–≤–µ–¥–∏—Ç–µ ID —É–¥–∞–ª—è–µ–º–æ–π –∑–∞–º–µ—Ç–∫–∏: ").strip()
    array_notes = lF.read_file()

    new_notes = [note for note in array_notes if note.get_id() != id_to_delete]

    if len(new_notes) == len(array_notes):
        print("ü§∑üèº‚Äç‚ôÄÔ∏è –ù–µ—Ç —Ç–∞–∫–æ–≥–æ id")
    else:
        wF.write_file(new_notes, 'w')
        print(f"–ó–∞–º–µ—Ç–∫–∞ —Å id: {id_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!üòä")

    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")


def change_note():
    array_notes = lF.read_file()
    if not array_notes:
        print("ü´ô –ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç")
        input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")
        return

    print("üìí –ñ–£–†–ù–ê–õ –ó–ê–ú–ï–¢–û–ö üìí")
    print("**********************")
    for note in array_notes:
        print_note(note)

    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è...")

    id = input("–í–≤–µ–¥–∏—Ç–µ ID –∏–∑–º–µ–Ω—è–µ–º–æ–π –∑–∞–º–µ—Ç–∫–∏: ").strip()
    flag = False
    array_notes_new = []

    for i in array_notes:
        if id == i.get_id():
            i.title = input("–ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:\n")
            i.body = input("–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n")
            i.set_date()
            flag = True
        array_notes_new.append(i)

    if flag:
        wF.write_file(array_notes_new, 'w')
        print("–ó–∞–º–µ—Ç–∫–∞ —Å ID:", id, "—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!‚ò∫Ô∏è")
    else:
        print("ü§∑üèº‚Äç‚ôÄÔ∏è –ù–µ—Ç —Ç–∞–∫–æ–≥–æ ID")

    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")








